//Conversion of Infix to prefix Expression
#include<stdio.h>	//Preprocessor Statements
#include<stdlib.h>
#include<ctype.h>
#include<string.h>
#define max 100	//Defining Size of array
int top=-1, a[max];	//Global variable declaration
void push(char x)	//Push function
{
    a[++top]=x;
}
char pop()	//Pop function
{
    if (top==-1)
     return -1;
    else
     return a[top--];
}
int prcd(char c)	//Precedence function
{
    if(c==')')
     return 0;
    else if(c=='+'||c=='-')
     return 1;
    else if(c=='*'||c=='/')
     return 2;
}
void strrev(char *exp)		//String reverse function
{
    char temp[50];
    int size=strlen(exp);
    temp[size--]='\0';
    int i=0;
    while(exp[i]!='\0')
    {
     temp[size]=exp[i];
     i++;
     size--;
    }
    strcpy(exp,temp);
}
void infixtoprefix(char infix[max], char prefix[max])	//Infix to prefix
{
    char temp, x;
    int i=0, j=0;
    strrev(infix);	//Reversing
    while(infix[i]!='\0')
    {
     temp=infix[i];
     if(isalnum(temp))
      {
       prefix[j++]=temp;
      }
     else if(temp==')')
       push(temp);
     else if(temp=='(')
      { 
       while((x=pop()!=')'))
       {
        prefix[j++]=x;
       }
      }
     else 
      {
       while (prcd(a[top])>=prcd(temp))
        {
         prefix[j++]=pop();
        }
       push(temp);
      }
    i++;
    }
    while(top!=-1)	//Checks condition
    prefix[j++]=pop();
    prefix[j]='\0';
    strrev(prefix);
}
int main()	//Main function
{
    char infix[max], prefix[max];
    printf("Enter the infix expression\n");	//Expression input
    scanf("%s", infix);
    infixtoprefix(infix,prefix);
    printf("The prefix expression is %s\n", prefix);
    return 0;
}
